/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * AIPark API
 * 기업연계 파이널 프로젝트 API 문서 백엔드 개발용
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from '../api/axios-client';
import type {
  ConcatSaveBody,
  ConvertMultipleAudiosBody,
  DataResponseDto,
  DeleteReqDto,
  DownloadGeneratedAudio1Params,
  DownloadGeneratedAudio2Params,
  DownloadGeneratedAudio3Params,
  DownloadGeneratedAudio4Params,
  DownloadGeneratedAudioParams,
  GetExports2Params,
  GetExportsParams,
  GetProjects1Params,
  GetProjectsParams,
  MemberIdCheckRequestDto,
  MemberIdFindRequestDto,
  MemberInfoRequestDto,
  MemberLoginRequestDto,
  MemberPasswordFindRequestDto,
  MemberSignUpRequestDto,
  MemberUpdateRequestDto,
  PasswordUpdateRequestDto,
  ProcessVCProjectBody,
  ProjectListDto,
  ResponseDto,
  SaveVCProjectBody,
  TestFailParams,
  TTSRequestDto,
  TTSSaveDto,
  UploadConcatBody,
  UploadConcatParams,
  UploadFiles1Body,
  UploadFiles1Params,
  UploadFilesBody,
  UploadFilesParams,
  UploadUnit1Body,
  UploadUnit1Params,
  UploadUnitBody,
  UploadUnitParams,
} from './aIParkAPI.schemas';

/**
 * 인증된 회원의 비밀번호를 변경합니다.
 * @summary 비밀번호 수정
 */
export const updatePassword = (passwordUpdateRequestDto: PasswordUpdateRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/password/update`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: passwordUpdateRequestDto,
  });
};

/**
 * 인증된 회원의 개인 정보를 수정합니다.
 * @summary 회원 정보 수정
 */
export const updateMemberInfo = (memberUpdateRequestDto: MemberUpdateRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/info/update`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: memberUpdateRequestDto,
  });
};

/**
 * VC 프로젝트 상태를 저장합니다.<br>- 새로운 프로젝트를 생성하거나 기존 프로젝트를 업데이트합니다.<br>- 사용자가 s3에 업로드한 오디오를 선택하면 MultipartFile의 값은 null로 보냅니다.<br>- 파일(MultipartFile)과 메타데이터(JSON)를 동시에 전송해야 합니다.
 * @summary VC 상태 저장
 */
export const saveVCProject = (saveVCProjectBody: SaveVCProjectBody) => {
  const formData = new FormData();
  if (saveVCProjectBody.file !== undefined) {
    saveVCProjectBody.file.forEach((value) => formData.append('file', value));
  }
  formData.append('metadata', JSON.stringify(saveVCProjectBody.metadata));

  return customInstance<ResponseDto>({
    url: `/vc/save`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

/**
 * 소스/타겟 오디오 파일 처리 및 Voice ID 생성
 * @summary VC 프로젝트 처리
 */
export const processVCProject = (processVCProjectBody: ProcessVCProjectBody) => {
  const formData = new FormData();
  formData.append('VCSaveRequestDto', JSON.stringify(processVCProjectBody.VCSaveRequestDto));
  processVCProjectBody.files.forEach((value) => formData.append('files', value));

  return customInstance<ResponseDto>({
    url: `/vc/process`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

/**
 * TTS 프로젝트 상태를 저장합니다.
 * @summary TTS 상태 저장
 */
export const ttsSave = (tTSSaveDto: TTSSaveDto) => {
  return customInstance<ResponseDto>({
    url: `/tts/save`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tTSSaveDto,
  });
};

/**
 * 주어진 텍스트 목록을 Google TTS API를 사용하여 음성 파일로 변환합니다.
 * @summary TTS 배치 변환
 */
export const convertBatchTexts = (tTSRequestDto: TTSRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/tts/convert/batch`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: tTSRequestDto,
  });
};

/**
 * 유닛 오디오를 S3 버킷에 저장하고 메타데이터를 DB에 저장하는 api입니다.<br><br>매개변수 : <br>- 유닛 id, <br>- 프로젝트 id, <br>- 프로젝트 타입 (TTS, VC, Concat), <br>- 오디오 파일
 * @summary 유닛(TTS or VC) 오디오 업로드
 */
export const uploadUnit = (uploadUnitBody: UploadUnitBody, params: UploadUnitParams) => {
  const formData = new FormData();
  formData.append('file', uploadUnitBody.file);

  return customInstance<ResponseDto>({
    url: `/s3_test/tts/upload-generated-audio-to-bucket`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
  });
};

/**
 * 유닛 오디오를 S3 버킷에 저장하고 메타데이터를 DB에 저장하는 api입니다.<br><br>매개변수 : <br>- 유닛 id, <br>- 프로젝트 id, <br>- 프로젝트 타입 (TTS, VC, Concat), <br>- 오디오 파일
 * @summary 유닛(TTS or VC) 오디오 업로드
 */
export const uploadUnit1 = (uploadUnit1Body: UploadUnit1Body, params: UploadUnit1Params) => {
  const formData = new FormData();
  formData.append('file', uploadUnit1Body.file);

  return customInstance<ResponseDto>({
    url: `/s3_test/vc/upload-generated-audio-to-bucket`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
  });
};

/**
 * VC, CONCAT으로 변환할 오디오를 클라이언트 로컬컴퓨터로부터 버킷에 저장하는 api입니다.<br><br>매개변수:<br>- 파일, <br>- 멤버Id, <br>- projectId, <br>- audioType<br>오디오 타입이 VC_TRG일 경우 마지막 매개변수로 voiceId를 입력합니다.
 * @summary 유저가 가지고 있는 오디오를 버킷에 저장
 */
export const uploadFiles = (uploadFilesBody: UploadFilesBody, params: UploadFilesParams) => {
  const formData = new FormData();
  uploadFilesBody.files.forEach((value) => formData.append('files', value));

  return customInstance<ResponseDto>({
    url: `/s3_test/vc/upload-local-to-bucket`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
  });
};

/**
 * VC, CONCAT으로 변환할 오디오를 클라이언트 로컬컴퓨터로부터 버킷에 저장하는 api입니다.<br><br>매개변수:<br>- 파일, <br>- 멤버Id, <br>- projectId, <br>- audioType<br>오디오 타입이 VC_TRG일 경우 마지막 매개변수로 voiceId를 입력합니다.
 * @summary 유저가 가지고 있는 오디오를 버킷에 저장
 */
export const uploadFiles1 = (uploadFiles1Body: UploadFiles1Body, params: UploadFiles1Params) => {
  const formData = new FormData();
  uploadFiles1Body.files.forEach((value) => formData.append('files', value));

  return customInstance<ResponseDto>({
    url: `/s3_test/concat/upload-local-to-bucket`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
  });
};

/**
 * 컨캣 오디오를 S3 버킷에 저장하고 메타데이터를 DB에 저장하는 api입니다.<br><br>매개변수 : <br>- 프로젝트 id, <br>- 오디오 파일
 * @summary Concat 오디오 업로드
 */
export const uploadConcat = (uploadConcatBody: UploadConcatBody, params: UploadConcatParams) => {
  const formData = new FormData();
  formData.append('file', uploadConcatBody.file);

  return customInstance<ResponseDto>({
    url: `/s3_test/concat/upload-generated-audio-to-bucket`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    params,
  });
};

/**
 * 회원 정보를 기반으로 회원가입을 수행합니다.
 * @summary 회원가입
 */
export const signUp = (memberSignUpRequestDto: MemberSignUpRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/signup`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberSignUpRequestDto,
  });
};

/**
 * 세션을 무효화하여 회원을 로그아웃 처리합니다.
 * @summary 회원 로그아웃
 */
export const logout = () => {
  return customInstance<ResponseDto>({ url: `/member/logout`, method: 'POST' });
};

/**
 * 회원 인증을 수행하고 세션을 생성합니다.
 * @summary 회원 로그인
 */
export const login = (memberLoginRequestDto: MemberLoginRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberLoginRequestDto,
  });
};

/**
 * 인증된 회원의 정보를 조회합니다.
 * @summary 회원 정보 조회
 */
export const getMemberInfo = (memberInfoRequestDto: MemberInfoRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/info`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberInfoRequestDto,
  });
};

/**
 * 이메일과 전화번호를 기반으로 회원의 비밀번호를 반환합니다.
 * @summary 비밀번호 찾기
 */
export const findPassword = (memberPasswordFindRequestDto: MemberPasswordFindRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/find-password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberPasswordFindRequestDto,
  });
};

/**
 * 이름과 전화번호를 기반으로 회원 이메일(ID)을 찾습니다.
 * @summary 회원 ID 찾기
 */
export const findId = (memberIdFindRequestDto: MemberIdFindRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/find-id`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberIdFindRequestDto,
  });
};

/**
 * 입력한 이메일이 중복되었는지 확인합니다.
 * @summary 이메일 중복 체크
 */
export const checkEmailDuplicate = (memberIdCheckRequestDto: MemberIdCheckRequestDto) => {
  return customInstance<ResponseDto>({
    url: `/member/check-id`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: memberIdCheckRequestDto,
  });
};

/**
 * Concat 프로젝트 상태를 저장합니다.
 * @summary Concat 상태 저장
 */
export const concatSave = (concatSaveBody: ConcatSaveBody) => {
  const formData = new FormData();
  formData.append('concatSaveDto', JSON.stringify(concatSaveBody.concatSaveDto));
  if (concatSaveBody.file !== undefined) {
    concatSaveBody.file.forEach((value) => formData.append('file', value));
  }

  return customInstance<ResponseDto>({
    url: `/concat/save`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

/**
 * 해당 Concat 프로젝트를 삭제하고 관련된 소스, 아웃풋 오디오를 삭제합니다.
 * @summary Concat 프로젝트 삭제
 */
export const deleteConcatProject = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/concat/delete/${projectId}`, method: 'POST' });
};

/**
 * Concat 프로젝트에서 선택된 모든 항목을 삭제합니다.
 * @summary Concat 선택된 항목 삭제
 */
export const deleteConcatDetails = (deleteReqDto: DeleteReqDto) => {
  return customInstance<ResponseDto>({
    url: `/concat/delete/details`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: deleteReqDto,
  });
};

/**
 * 여러 오디오 파일을 업로드하고, 파일 사이에 무음을 추가하여 병합된 파일을 생성합니다.
 * @summary 오디오 파일 병합
 */
export const convertMultipleAudios = (convertMultipleAudiosBody: ConvertMultipleAudiosBody) => {
  const formData = new FormData();
  formData.append('concatRequestDto', JSON.stringify(convertMultipleAudiosBody.concatRequestDto));
  convertMultipleAudiosBody.files.forEach((value) => formData.append('files', value));

  return customInstance<DataResponseDto>({
    url: `/concat/convert/batch`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

export const getProjects = (params: GetProjectsParams) => {
  return customInstance<ResponseDto>({ url: `/workspace/projects`, method: 'GET', params });
};

/**
 * 해당 유저의 최근 프로젝트 5개를 조회합니다. <br>유저의 id는 세션에서 가져옵니다. (회원 기능 구현 전 임시 하드코딩으로 멤버 id가 1인 유저의 최근 프로젝트 목록을 가져옵니다.
 * @summary 최근 프로젝트 5개 조회
 */
export const getRecentProjects = () => {
  return customInstance<ResponseDto>({ url: `/workspace/project-list`, method: 'GET' });
};

export const getExports2 = (params: GetExports2Params) => {
  return customInstance<ResponseDto>({ url: `/workspace/exports`, method: 'GET', params });
};

export const getRecentExports = () => {
  return customInstance<ResponseDto>({ url: `/workspace/export-list`, method: 'GET' });
};

export const getProjects1 = (params?: GetProjects1Params) => {
  return customInstance<ProjectListDto[]>({
    url: `/workspace/api/v1/projects`,
    method: 'GET',
    params,
  });
};

export const getExports = (params?: GetExportsParams) => {
  return customInstance<ResponseDto>({
    url: `/workspace/api/v1/exports-test`,
    method: 'GET',
    params,
  });
};

export const voice = () => {
  return customInstance<ResponseDto>({ url: `/voice-style`, method: 'GET' });
};

/**
 * VC 프로젝트 상태를 가져옵니다.
 * @summary VC 상태 로드
 */
export const vcLoad = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/vc/${projectId}`, method: 'GET' });
};

/**
 * VC TRG 오디오 리스트를 가져옵니다.
 * @summary VC TRG 오디오 리스트 로드
 */
export const trgAudioLoad = () => {
  return customInstance<ResponseDto>({ url: `/vc/trg-audio`, method: 'GET' });
};

/**
 * TTS 프로젝트 상태를 가져옵니다.
 * @summary TTS 상태 로드
 */
export const ttsLoad = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/tts/${projectId}`, method: 'GET' });
};

export const testSuccess = () => {
  return customInstance<ResponseDto>({ url: `/test/success`, method: 'GET' });
};

export const testFail = (params: TestFailParams) => {
  return customInstance<ResponseDto>({ url: `/test/fail`, method: 'GET', params });
};

/**
 * 오디오를 S3 버킷으로부터 다운로드 받을수 있는 URL을 제공하는 API 입니다.<br><br>매개변수:<br>- 버킷 경로
 * @summary 버킷에 있는 오디오 다운로드
 */
export const downloadGeneratedAudio = (params: DownloadGeneratedAudioParams) => {
  return customInstance<ResponseDto>({
    url: `/s3_test/tts/download-generated-audio-from-bucket`,
    method: 'GET',
    params,
  });
};

/**
 * 오디오를 S3 버킷으로부터 다운로드 받을수 있는 URL을 제공하는 API 입니다.<br><br>매개변수:<br>- 버킷 경로
 * @summary 버킷에 있는 오디오 다운로드
 */
export const downloadGeneratedAudio1 = (params: DownloadGeneratedAudio1Params) => {
  return customInstance<ResponseDto>({
    url: `/s3_test/vc/download-generated-audio-from-bucket`,
    method: 'GET',
    params,
  });
};

/**
 * 오디오를 S3 버킷으로부터 다운로드 받을수 있는 URL을 제공하는 API 입니다.<br><br>매개변수:<br>- 버킷 경로
 * @summary 버킷에 있는 오디오 다운로드
 */
export const downloadGeneratedAudio2 = (params: DownloadGeneratedAudio2Params) => {
  return customInstance<ResponseDto>({
    url: `/s3_test/concat/download-to-generate-audio-from-bucket`,
    method: 'GET',
    params,
  });
};

/**
 * 오디오를 S3 버킷으로부터 다운로드 받을수 있는 URL을 제공하는 API 입니다.<br><br>매개변수:<br>- 버킷 경로
 * @summary 버킷에 있는 오디오 다운로드
 */
export const downloadGeneratedAudio3 = (params: DownloadGeneratedAudio3Params) => {
  return customInstance<ResponseDto>({
    url: `/s3_test/vc/download-to-generate-audio-from-bucket`,
    method: 'GET',
    params,
  });
};

/**
 * 오디오를 S3 버킷으로부터 다운로드 받을수 있는 URL을 제공하는 API 입니다.<br><br>매개변수:<br>- 버킷 경로
 * @summary 버킷에 있는 오디오 다운로드
 */
export const downloadGeneratedAudio4 = (params: DownloadGeneratedAudio4Params) => {
  return customInstance<ResponseDto>({
    url: `/s3_test/concat/download-generated-audio-from-bucket`,
    method: 'GET',
    params,
  });
};

/**
 * Concat 프로젝트 상태를 가져옵니다.
 * @summary Concat 상태 로드
 */
export const concatLoad = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/concat/${projectId}`, method: 'GET' });
};

export const start = () => {
  return customInstance<ResponseDto>({ url: `/`, method: 'GET' });
};

export const deleteProjects = (deleteProjectsBody: number[]) => {
  return customInstance<ResponseDto>({
    url: `/workspace/delete/project`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteProjectsBody,
  });
};

export const deleteExports = (deleteExportsBody: number[]) => {
  return customInstance<ResponseDto>({
    url: `/workspace/delete/export`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteExportsBody,
  });
};

/**
 * VC 프로젝트와 생성된 오디오 등 관련된 데이터를 전부 삭제합니다.
 * @summary VC 프로젝트 삭제
 */
export const deleteVCProject = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/vc/delete/${projectId}`, method: 'DELETE' });
};

/**
 * VC 프로젝트에서 target 오디오 선택된 모든 항목을 삭제합니다.
 * @summary VC 프로젝트 target 오디오 선택 항목 삭제
 */
export const deleteTRGAudio = (audioId: number) => {
  return customInstance<ResponseDto>({ url: `/vc/delete/target/${audioId}`, method: 'DELETE' });
};

/**
 * VC 프로젝트에서 선택된 모든 항목을 삭제합니다.
 * @summary VC 선택된 항목 삭제
 */
export const deleteVCDetail = (deleteReqDto: DeleteReqDto) => {
  return customInstance<ResponseDto>({
    url: `/vc/delete/details`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteReqDto,
  });
};

/**
 * TTS 프로젝트와 생성된 오디오를 전부 삭제합니다.
 * @summary TTS 프로젝트 삭제
 */
export const deleteTTSProject = (projectId: number) => {
  return customInstance<ResponseDto>({ url: `/tts/delete/${projectId}`, method: 'DELETE' });
};

/**
 * TTS 프로젝트에서 선택된 모든 항목을 삭제합니다.
 * @summary TTS 선택된 항목 삭제
 */
export const deleteTTSDetails = (deleteReqDto: DeleteReqDto) => {
  return customInstance<ResponseDto>({
    url: `/tts/delete/details`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteReqDto,
  });
};

export const deleteOutputAudioMetaByS3 = (projectId: number) => {
  return customInstance<string>({ url: `/s3_test/delete/project/${projectId}`, method: 'DELETE' });
};

export const deleteMemberAudio = (outputAudioMetaId: number) => {
  return customInstance<string>({
    url: `/s3_test/delete/audio/${outputAudioMetaId}`,
    method: 'DELETE',
  });
};

export type UpdatePasswordResult = NonNullable<Awaited<ReturnType<typeof updatePassword>>>;
export type UpdateMemberInfoResult = NonNullable<Awaited<ReturnType<typeof updateMemberInfo>>>;
export type SaveVCProjectResult = NonNullable<Awaited<ReturnType<typeof saveVCProject>>>;
export type ProcessVCProjectResult = NonNullable<Awaited<ReturnType<typeof processVCProject>>>;
export type TtsSaveResult = NonNullable<Awaited<ReturnType<typeof ttsSave>>>;
export type ConvertBatchTextsResult = NonNullable<Awaited<ReturnType<typeof convertBatchTexts>>>;
export type UploadUnitResult = NonNullable<Awaited<ReturnType<typeof uploadUnit>>>;
export type UploadUnit1Result = NonNullable<Awaited<ReturnType<typeof uploadUnit1>>>;
export type UploadFilesResult = NonNullable<Awaited<ReturnType<typeof uploadFiles>>>;
export type UploadFiles1Result = NonNullable<Awaited<ReturnType<typeof uploadFiles1>>>;
export type UploadConcatResult = NonNullable<Awaited<ReturnType<typeof uploadConcat>>>;
export type SignUpResult = NonNullable<Awaited<ReturnType<typeof signUp>>>;
export type LogoutResult = NonNullable<Awaited<ReturnType<typeof logout>>>;
export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type GetMemberInfoResult = NonNullable<Awaited<ReturnType<typeof getMemberInfo>>>;
export type FindPasswordResult = NonNullable<Awaited<ReturnType<typeof findPassword>>>;
export type FindIdResult = NonNullable<Awaited<ReturnType<typeof findId>>>;
export type CheckEmailDuplicateResult = NonNullable<
  Awaited<ReturnType<typeof checkEmailDuplicate>>
>;
export type ConcatSaveResult = NonNullable<Awaited<ReturnType<typeof concatSave>>>;
export type DeleteConcatProjectResult = NonNullable<
  Awaited<ReturnType<typeof deleteConcatProject>>
>;
export type DeleteConcatDetailsResult = NonNullable<
  Awaited<ReturnType<typeof deleteConcatDetails>>
>;
export type ConvertMultipleAudiosResult = NonNullable<
  Awaited<ReturnType<typeof convertMultipleAudios>>
>;
export type GetProjectsResult = NonNullable<Awaited<ReturnType<typeof getProjects>>>;
export type GetRecentProjectsResult = NonNullable<Awaited<ReturnType<typeof getRecentProjects>>>;
export type GetExports2Result = NonNullable<Awaited<ReturnType<typeof getExports2>>>;
export type GetRecentExportsResult = NonNullable<Awaited<ReturnType<typeof getRecentExports>>>;
export type GetProjects1Result = NonNullable<Awaited<ReturnType<typeof getProjects1>>>;
export type GetExportsResult = NonNullable<Awaited<ReturnType<typeof getExports>>>;
export type VoiceResult = NonNullable<Awaited<ReturnType<typeof voice>>>;
export type VcLoadResult = NonNullable<Awaited<ReturnType<typeof vcLoad>>>;
export type TrgAudioLoadResult = NonNullable<Awaited<ReturnType<typeof trgAudioLoad>>>;
export type TtsLoadResult = NonNullable<Awaited<ReturnType<typeof ttsLoad>>>;
export type TestSuccessResult = NonNullable<Awaited<ReturnType<typeof testSuccess>>>;
export type TestFailResult = NonNullable<Awaited<ReturnType<typeof testFail>>>;
export type DownloadGeneratedAudioResult = NonNullable<
  Awaited<ReturnType<typeof downloadGeneratedAudio>>
>;
export type DownloadGeneratedAudio1Result = NonNullable<
  Awaited<ReturnType<typeof downloadGeneratedAudio1>>
>;
export type DownloadGeneratedAudio2Result = NonNullable<
  Awaited<ReturnType<typeof downloadGeneratedAudio2>>
>;
export type DownloadGeneratedAudio3Result = NonNullable<
  Awaited<ReturnType<typeof downloadGeneratedAudio3>>
>;
export type DownloadGeneratedAudio4Result = NonNullable<
  Awaited<ReturnType<typeof downloadGeneratedAudio4>>
>;
export type ConcatLoadResult = NonNullable<Awaited<ReturnType<typeof concatLoad>>>;
export type StartResult = NonNullable<Awaited<ReturnType<typeof start>>>;
export type DeleteProjectsResult = NonNullable<Awaited<ReturnType<typeof deleteProjects>>>;
export type DeleteExportsResult = NonNullable<Awaited<ReturnType<typeof deleteExports>>>;
export type DeleteVCProjectResult = NonNullable<Awaited<ReturnType<typeof deleteVCProject>>>;
export type DeleteTRGAudioResult = NonNullable<Awaited<ReturnType<typeof deleteTRGAudio>>>;
export type DeleteVCDetailResult = NonNullable<Awaited<ReturnType<typeof deleteVCDetail>>>;
export type DeleteTTSProjectResult = NonNullable<Awaited<ReturnType<typeof deleteTTSProject>>>;
export type DeleteTTSDetailsResult = NonNullable<Awaited<ReturnType<typeof deleteTTSDetails>>>;
export type DeleteOutputAudioMetaByS3Result = NonNullable<
  Awaited<ReturnType<typeof deleteOutputAudioMetaByS3>>
>;
export type DeleteMemberAudioResult = NonNullable<Awaited<ReturnType<typeof deleteMemberAudio>>>;
